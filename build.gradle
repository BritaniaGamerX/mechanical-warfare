buildscript{
    ext{
        props = new Properties().with{ p -> p.load(file('gradle.properties').newReader()); return p }

        mindustryVersion = props["mindustryVersion"]
        novaHash = props["novahash"]
    }

    repositories{
        mavenCentral()
        maven{ url 'https://jitpack.io' }
    }

    dependencies{
        classpath "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        classpath "com.github.Anuken.Arc:backend-headless:$mindustryVersion"
        classpath "com.github.Anuken.Mindustry:core:$mindustryVersion"
        classpath "com.github.GlennFolker.Nova:nova-main:$novaHash"
    }
}

allprojects{
    apply plugin: "java"

    group = "com.github.JerichoFletcher"
    version = "1.0"

    ext{
        mindustryVersion = props["mindustryVersion"]
        modName = props["modName"]

        sdkVersion = '30'
        sdkRoot = System.getenv("ANDROID_HOME")

        version '1.0'

        sourceCompatibility = 1.8

        writeProcessors = {
            new File(rootDir, "annotations/resources/META-INF/services/").mkdirs()
            def processorFile = new File(rootDir, "annotations/resources/META-INF/services/javax.annotation.processing.Processor")
            def text = new StringBuilder()
            def files = new File(rootDir, "annotations/src/")
            files.eachFileRecurse(groovy.io.FileType.FILES){ file ->
                if(file.name.endsWith(".java") && (file.text.contains(" extends NovaProcessor") && !file.text.contains("abstract class"))){
                    text.append(file.path.substring(files.path.length() + 1)).append("\n")
                }
            }

            processorFile.text = text.toString().replace(".java", "").replace("/", ".").replace("\\", ".")
        }
    }

    repositories{
        mavenLocal()
        mavenCentral()
        maven{ url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven{ url "https://oss.sonatype.org/content/repositories/releases/" }
        maven{ url 'https://jitpack.io' }
        jcenter()
    }

    //java 8 backwards compatibility flag
    tasks.withType(JavaCompile){
        if(JavaVersion.current() != JavaVersion.VERSION_1_8){
            options.compilerArgs.addAll(['--release', '8'])
        }
    }
}

project(":annotations"){
    apply plugin: 'java-library'

    dependencies{
        implementation "com.squareup:javapoet:1.12.1"
        implementation "com.github.GlennFolker.Nova:nova-main:$novaHash"
        implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    }
}

project(":mw"){
    apply plugin: 'java-library'

    task preGen{
        writeProcessors()
    }

    dependencies{
        compileJava.dependsOn(preGen)

        implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"

        implementation project(":annotations")
        annotationProcessor project(":annotations")
    }
}

project(":tools"){
    apply plugin: 'java-library'

    dependencies{
        implementation project(":mw")

        implementation "com.github.Anuken.Arc:arc-core:$mindustryVersion"
        implementation "com.github.Anuken.Arc:backend-headless:$mindustryVersion"
        implementation "com.github.Anuken.Mindustry:core:$mindustryVersion"
    }
}
